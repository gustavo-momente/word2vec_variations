#!/usr/bin/python

__author__ = 'vilelag'


import argparse
import numpy as np


def create_parsers():
    #parser for the main program
    parser = argparse.ArgumentParser(description='Calculate distance between representations, given 2 dictionaries'
                                                 'and a file with class data. For an example check '
                                                 './Tests/start_config/*.sh')
    parser.add_argument('-sn', metavar='<file>', required=True,
                        help='Dictionary with word representations before w2v training')
    parser.add_argument('-en', metavar='<file>', required=True,
                        help='Dictionary with word representations after w2v training')
    parser.add_argument('-c', '-class', metavar='<file>', required=True,
                        help='Class data generated by create_class.py')
    return parser


def read_class_file(fin):
    with open(fin, 'r') as f:
        content = f.read().splitlines()
    words = []
    for line in content:
        tmp = line.split(' ')
        words.append(tmp[0].upper())
    return words


def read_word_representation(path):
    with open(path) as f:
        content = f.read().splitlines()
    data = dict()
    words, size = content[0].split(' ')
    words = int(words)
    size = int(size)

    for i in range(1, words+1):
        temp = content[i].split(' ')
        data[temp[0].upper()] = np.asarray([np.float64(x) for x in temp[1:-1]], dtype=np.float64)
        # Normalizing
        data[temp[0].upper()] *= 1 / np.linalg.norm(data[temp[0].upper()])

    return data


def main():
    parser = create_parsers()
    args = vars(parser.parse_args())
    start_net = args['sn']
    finish_net = args['en']
    _class = args['c']

    words = read_class_file(_class)

    print('Reading start representations')
    start = read_word_representation(start_net)
    print('Reading finish representations')
    finish = read_word_representation(finish_net)

    # distance = []
    mean = 0
    _size = len(words)

    for w in words:
        try:
            # tmp = np.linalg.norm(finish[w]-start[w])
            # tmp = np.dot(finish[w]/np.linalg.norm(finish[w]), start[w]/np.linalg.norm(start[w]))
            tmp = np.dot(finish[w], start[w])
            # distance.append(tmp)
            print'{}: {}'.format(w,tmp)
            mean += tmp
        except KeyError:
            _size -= 1

    mean /= _size
    print 'mean: {}'.format(mean)

main()