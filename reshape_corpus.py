#!/usr/bin/python

__author__ = 'vilelag'

import sys
import argparse


def create_parsers():
    #parser for the main program
    parser = argparse.ArgumentParser(description='Merges class data from files')
    parser.add_argument('-t', '-tree', metavar='<file>', required=True,
                        help='Tree generated by word_net_tree.py')
    parser.add_argument('-c', '-corpus', metavar='<file>', required=True,
                        help='Starting corpus')
    parser.add_argument('-o', '-output', metavar='<file>', default='merge_class_data.txt',
                        help='File where the generated corpus will be saved')
    return parser


def read_tree(fin):
    with open(fin, 'r') as f:
        content = f.read().splitlines()
    alias = dict()
    for line in content:
        tmp = line.split(' ')
        ps_class = tmp[0]
        for word in tmp[1:]:
            alias[word] = ps_class

    return alias


def save_corpus(corpus, fout, alias):
    with open(corpus, 'r') as f:
        with open(fout, 'w') as fw:
            for line in f:
                line = line.rstrip('\n')
                new_line = []
                tmp = line.split(' ')
                for word in tmp:
                    try:
                        new_line.append(alias[word])
                    except KeyError:
                        new_line.append(word)
                fw.write('{}\n'.format(' '.join(new_line)))


def main():
    parser = create_parsers()
    args = vars(parser.parse_args())
    fin = args['c']
    fout = args['o']
    tree = args['t']

    alias = read_tree(tree)
    print len(alias)
    save_corpus(fin, fout, alias)

main()